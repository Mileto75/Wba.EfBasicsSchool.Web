// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wba.EfBasics.Web.Data;

#nullable disable

namespace Wba.EfBasics.Web.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    [Migration("20241114083514_ChangeDateSeeding")]
    partial class ChangeDateSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("DboSchool")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseStudent", "DboSchool");

                    b.HasData(
                        new
                        {
                            CoursesId = 1,
                            StudentsId = 1
                        },
                        new
                        {
                            CoursesId = 1,
                            StudentsId = 2
                        },
                        new
                        {
                            CoursesId = 1,
                            StudentsId = 3
                        },
                        new
                        {
                            CoursesId = 1,
                            StudentsId = 4
                        },
                        new
                        {
                            CoursesId = 2,
                            StudentsId = 1
                        },
                        new
                        {
                            CoursesId = 2,
                            StudentsId = 2
                        },
                        new
                        {
                            CoursesId = 2,
                            StudentsId = 3
                        },
                        new
                        {
                            CoursesId = 2,
                            StudentsId = 4
                        });
                });

            modelBuilder.Entity("Wba.EfBasics.Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Addresses", "DboSchool");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 11, 14, 9, 35, 14, 284, DateTimeKind.Local).AddTicks(9124),
                            FullAdress = "Langestraat 67, 8370 Blankenberge"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 11, 14, 9, 35, 14, 284, DateTimeKind.Local).AddTicks(9181),
                            FullAdress = "Molenstraat 78, 8000 Brugge"
                        });
                });

            modelBuilder.Entity("Wba.EfBasics.Core.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses", "DboSchool");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2026, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Web Backend",
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 11, 14, 9, 35, 14, 284, DateTimeKind.Local).AddTicks(9306),
                            Name = "Web Frontend Advanced",
                            TeacherId = 1
                        });
                });

            modelBuilder.Entity("Wba.EfBasics.Core.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.ToTable("Students", "DboSchool");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 11, 14, 9, 35, 14, 284, DateTimeKind.Local).AddTicks(9191),
                            Firstname = "Mark",
                            Lastname = "Knopfler"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 11, 14, 9, 35, 14, 284, DateTimeKind.Local).AddTicks(9193),
                            Firstname = "Jimi",
                            Lastname = "Hendrix"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 11, 14, 9, 35, 14, 284, DateTimeKind.Local).AddTicks(9194),
                            Firstname = "Rory",
                            Lastname = "Gallagher"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2024, 11, 14, 9, 35, 14, 284, DateTimeKind.Local).AddTicks(9196),
                            Firstname = "Tim",
                            Lastname = "Henson"
                        });
                });

            modelBuilder.Entity("Wba.EfBasics.Core.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.ToTable("Teachers", "DboSchool");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 2,
                            Created = new DateTime(2024, 11, 14, 9, 35, 14, 284, DateTimeKind.Local).AddTicks(9186),
                            Firstname = "Bart",
                            Lastname = "Soete"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 1,
                            Created = new DateTime(2024, 11, 14, 9, 35, 14, 284, DateTimeKind.Local).AddTicks(9188),
                            Firstname = "Mileto",
                            Lastname = "Di Marco"
                        });
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("Wba.EfBasics.Core.Entities.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wba.EfBasics.Core.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Wba.EfBasics.Core.Entities.Course", b =>
                {
                    b.HasOne("Wba.EfBasics.Core.Entities.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Wba.EfBasics.Core.Entities.Student", b =>
                {
                    b.HasOne("Wba.EfBasics.Core.Entities.Address", "Address")
                        .WithOne("Student")
                        .HasForeignKey("Wba.EfBasics.Core.Entities.Student", "AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Wba.EfBasics.Core.Entities.Teacher", b =>
                {
                    b.HasOne("Wba.EfBasics.Core.Entities.Address", "Address")
                        .WithOne("Teacher")
                        .HasForeignKey("Wba.EfBasics.Core.Entities.Teacher", "AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Wba.EfBasics.Core.Entities.Address", b =>
                {
                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Wba.EfBasics.Core.Entities.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
